---
import Layout from "@layouts/layout.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { portfolioSchema } from '@content/config';
import { ZodError } from 'zod';
import { getAllCollections } from '@lib/utils/content';

export async function getStaticPaths() {
    const content = await getAllCollections();
    const paths =  content.map((entry) => ({
        params: { 
            type: entry.collection,
            slug: entry.slug,
        },
        props: {
            entry
        }
    }));

    return paths
}

const { entry } = Astro.props;

function parsePortfolio(page: any) {
    try {
        const parsedPage = portfolioSchema.parse(page);
        return parsedPage;
    } catch (error) {
        if (error instanceof ZodError) {
            throw new Error(`Validation failed: ${error.message}`);
        }
        throw error;
    }
}
const parsedPage = parsePortfolio(entry.data);
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif,webp}')
---
<Layout>
    <section id="bg" class="fixed w-full h-[100dvh] flex flex-col gap-4 justify-center items-center">
        <Image  src={images[parsedPage.mockup]()} alt={parsedPage.title} class="aspect-square w-full md:w-2/3 lg:w-1/2 px-4 object-cover rasterize brightness-50"/>
        <div class="w-full h-full absolute flex justify-center items-center flex-col invert">
            <h1 class="text-center text-7xl md:text-8xl xl:text-9xl tracking-tighter uppercase font-medium min-h-20 flex justify-center items-center">
                <span id="name">{parsedPage.name}</span>
            </h1>
            <div class="text-base md:text-lg xl:text-xl min-h-8 text-center uppercase flex justify-center items-center gap-4">
                <p data-text="Full-stack developer & Designer" id="description">{parsedPage.year}</p>
                <p data-text="Full-stack developer & Designer" id="description">{parsedPage.category}</p>
            </div>
        </div>
    </section>
    <div id="content" class="w-full h-full flex flex-col pt-36 px-4 md:px-8 xl:px-16 py-8 gap-8 relative">
        <div class="w-full h-screen">
        </div>
    </div>
</Layout>

<script>
    import { gsapProvider } from "@lib/animations/gsap";
    document.addEventListener('DOMContentLoaded', ()=>{
        const bg = document.getElementById('bg') as HTMLElement;
        const content = document.getElementById('content') as HTMLElement;

        gsapProvider.instance.to(bg, {
            scale: 0.75,
            ease: "expo.inOut",
            scrollTrigger: {
                trigger: content,
                start: "top top",
                end: "bottom bottom",
                scrub: true
            }
        });
    });
</script>