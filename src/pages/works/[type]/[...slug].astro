---
import Layout from "@layouts/layout.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { portfolioSchema } from '@content/config';
import { ZodError } from 'zod';
import { getAllCollections } from '@lib/utils/content';

export async function getStaticPaths() {
    const content = await getAllCollections();
    const paths =  content.map((entry) => ({
        params: { 
            type: entry.collection,
            slug: entry.slug,
        },
        props: {
            entry
        }
    }));

    return paths
}

const { entry } = Astro.props;

function parsePortfolio(page: any) {
    try {
        const parsedPage = portfolioSchema.parse(page);
        return parsedPage;
    } catch (error) {
        if (error instanceof ZodError) {
            throw new Error(`Validation failed: ${error.message}`);
        }
        throw error;
    }
}
const parsedPage = parsePortfolio(entry.data);
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif,webp}')

---
<Layout optViewTransitions>

	<div class="w-full min-h-screen h-full pt-24 lg:pt-36 flex flex-col px-4 md:px-8 xl:px-16 py-8 gap-32">
        <section class="w-full h-fit flex-col flex gap-8">
            <div class="w-full h-[87dvh] lg:h-[80dvh] lg:flex-row flex flex-col gap-8 overflow-hidden">
                <div class="w-full flex-1 overflow-hidden">
                    <Image transition:persist transition:name=`${parsedPage.title}`  src={images[parsedPage.mockup]()} alt={parsedPage.title} class="w-full h-full object-cover"/>
                </div>    
                <div class="flex flex-col gap-8 lg:w-1/3 lg:max-w-[500px]">
                    <div class="flex flex-col w-full gap-4">
                        <h1 class="text-start text-7xl md:text-8xl xl:text-9xl tracking-tighter uppercase font-medium flex justify-start items-center flex-wrap ">
                            {parsedPage.name}
                        </h1>
                        
                        <h2 class="w-full wrapping pr-4">
                            {parsedPage.description}
                        </h2>
                    </div>
                    <div class="flex-col gap-4 hidden lg:flex">
                        <div class="w-full justify-between flex">
                            <h3 class="uppercase text-gray-400">Role</h3>
                            <p>{parsedPage.role}</p> 
                        </div>
                        <div class="w-full justify-between flex">
                            <h3 class="uppercase text-gray-400">Tech Used</h3>
                            <ul>{parsedPage.stack?.map(tech => (
                                <li class="text-end">
                                    {tech}
                                </li>
                            ))}</ul> 
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex-col gap-4 flex lg:hidden">
                <div class="w-full justify-between flex">
                    <h3 class="uppercase text-gray-400">Role</h3>
                    <p>{parsedPage.role}</p> 
                </div>
                <div class="w-full justify-between flex">
                    <h3 class="uppercase text-gray-400">Tech Used</h3>
                    <ul>{parsedPage.stack?.map(tech => (
                        <li class="text-end">
                            {tech}
                        </li>
                    ))}</ul> 
                </div>
            </div>
        </section>
        <h1 class="w-full text-center uppercase text-[#0000ff] text-base md:text-lg xl:text-xl">[Study Case]</h1>
        <section class="w-full lg:w-full justify-center flex mb-32">
            <div class="w-full lg:w-2/3 flex-col flex gap-16">
                <div class="flex flex-col w-full justify-between gap-2 lg:gap-4 lg:flex-row">
                    <h3 class="text-[#0000ff] uppercase w-full lg:w-1/5">Problem</h3>
                    <p class="w-full lg:w-4/5">
                        {parsedPage.problem}
                    </p>
                </div>
                <div class="flex flex-col w-full justify-between gap-2 lg:gap-4  lg:flex-row">
                    <h3 class="text-[#0000ff] uppercase w-full lg:w-1/5">Solution</h3>
                    <p class="w-full lg:w-4/5">
                        {parsedPage.solution}
                    </p>
                </div>
                <div class="flex flex-col w-full justify-between gap-2 lg:gap-4 lg:flex-row">
                    <h3 class="text-[#0000ff] uppercase w-full lg:w-1/5">Dev</h3>
                    <p class="w-full lg:w-4/5">
                        {parsedPage.development_process}
                    </p>
                </div>
                <div class="flex flex-col w-full justify-between gap-2 lg:gap-4 lg:flex-row">
                    <h3 class="text-[#0000ff] uppercase w-full lg:w-1/5">Features and Scope</h3>
                    <ul class="w-full lg:w-4/5">
                        {parsedPage.features_scope.map(fs =>(
                            <div class="flex items-center gap-2">
                                <div class="w-1 h-1 bg-[#0000ff]"></div>
                                <li>{fs}</li>
                            </div>
                        ))}
                    </ul>
                </div>
            </div>
            
        </section>
        <h1 class="w-full text-center uppercase text-[#0000ff] text-base md:text-lg xl:text-xl">[Project Gallery]</h1>
        <section class="w-full">
            <div class="w-full flex-col relative h-[500px] md:flex-row flex gap-4">
                <Image src={images[parsedPage.mockup]()} alt={parsedPage.title} class="md:w-1/4 w-full object-cover rasterize"/> 
                <Image src={images[parsedPage.mockup]()} alt={parsedPage.title} class="w-full md:w-2/4 object-cover rasterize"/> 
                <Image src={images[parsedPage.mockup]()} alt={parsedPage.title} class="md:w-1/4 w-full object-cover rasterize"/> 
            </div>
        </section>
    </div>
    
</Layout>

<style>
    .wrapping{
        text-wrap: pretty;
    }
</style>
<script>
    // import { gsapProvider } from "@lib/animations/gsap";
    // document.addEventListener('DOMContentLoaded', ()=>{
    //     const bg = document.getElementById('bg') as HTMLElement;
    //     const content = document.getElementById('content') as HTMLElement;

    //     gsapProvider.instance.to(bg, {
    //         scale: 0.75,
    //         ease: "expo.inOut",
    //         scrollTrigger: {
    //             trigger: content,
    //             start: "top top",
    //             end: "bottom bottom",
    //             scrub: true
    //         }
    //     });
    // });
</script>