---
import Layout from "@layouts/layout.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import { portfolioSchema } from '@content/config';
import { ZodError } from 'zod';
import { getAllCollections } from '@lib/utils/content';

export async function getStaticPaths() {
    const content = await getAllCollections();
    const paths =  content.map((entry) => ({
        params: { 
            type: entry.collection,
            slug: entry.slug,
        },
        props: {
            entry
        }
    }));

    return paths
}

const { entry } = Astro.props;

function parsePortfolio(page: any) {
    try {
        const parsedPage = portfolioSchema.parse(page);
        return parsedPage;
    } catch (error) {
        if (error instanceof ZodError) {
            throw new Error(`Validation failed: ${error.message}`);
        }
        throw error;
    }
}
const parsedPage = parsePortfolio(entry.data);
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif,webp}')

---
<Layout optViewTransitions>

	<div class="w-full min-h-screen h-full pt-20 lg:pt-36 flex flex-col px-4 md:px-8 xl:px-16 py-8 gap-32">
        <section class="w-full h-full flex flex-col lg:flex-row gap-8">
            <div class="w-full h-full lg:h-[80dvh] overflow-clip">
                <Image transition:persist transition:name=`${parsedPage.title}` src={images[parsedPage.mockup]()} alt={parsedPage.title} class="w-full scale-[1.1] md:scale-100 h-full min-h-[600px] object-cover rasterize"/> 
            </div>
            <aside class="w-full lg:w-[700px] flex flex-col gap-8">
                <div class="flex flex-col gap-4">
                    <h1 class="text-start text-7xl md:text-8xl xl:text-9xl tracking-tighter uppercase font-medium flex justify-start items-center flex-wrap ">
                        {parsedPage.name}
                    </h1>
                    
                    <h2 class="w-full wrapping">
                        {parsedPage.description}
                    </h2>
                </div>
                <div class="w-full h-fit flex gap-2 justify-between">
                    <h3 class="uppercase text-gray-400">Role</h3>
                    <p>
                        {parsedPage.role}     
                    </p> 
                </div>
                <div class="flex justify-between">
                    <h1 class="text-gray-400 uppercase">Tech used</h1>
                    <ul class="text-end">
                        {parsedPage.stack?.map(tech => (
                            <li>{tech}</li>
                        ))}
                    </ul>
                </div>
            </aside>
        </section>
        <section class="w-full min-h-screen flex-col flex gap-16">
            <div class="flex w-full justify-between gap-16 min-h-24">
                <h3 class="text-[#0000ff] uppercase w-1/3 ">Problem</h3>
                <p class="w-2/3">
                    {parsedPage.problem}
                </p>
            </div>
            <div class="flex w-full justify-between gap-16 min-h-24">
                <h3 class="text-[#0000ff] uppercase w-1/3">solution</h3>
                <p class="w-2/3">
                    {parsedPage.solution}
                </p>
            </div>
            <!-- <div class="w-full flex-col relative h-[500px] md:flex-row flex gap-4">
                <Image src={images[parsedPage.mockup]()} alt={parsedPage.title} class="md:w-1/4 w-full object-cover rasterize"/> 
                <Image src={images[parsedPage.mockup]()} alt={parsedPage.title} class="w-full md:w-2/4 object-cover rasterize"/> 
                <Image src={images[parsedPage.mockup]()} alt={parsedPage.title} class="md:w-1/4 w-full object-cover rasterize"/> 
            </div> -->
        </section>
    </div>
    
</Layout>

<style>
    .wrapping{
        text-wrap: pretty;
    }
</style>
<script>
    // import { gsapProvider } from "@lib/animations/gsap";
    // document.addEventListener('DOMContentLoaded', ()=>{
    //     const bg = document.getElementById('bg') as HTMLElement;
    //     const content = document.getElementById('content') as HTMLElement;

    //     gsapProvider.instance.to(bg, {
    //         scale: 0.75,
    //         ease: "expo.inOut",
    //         scrollTrigger: {
    //             trigger: content,
    //             start: "top top",
    //             end: "bottom bottom",
    //             scrub: true
    //         }
    //     });
    // });
</script>